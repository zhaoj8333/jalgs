/*
    回溯： Back Tracking

        通过选择不同的岔路口来通往目的地

        每一步都选择一条路出发，能进则进，不能进则退回上一步（回溯），换一条路再试

    回溯的应用：  树、 图的深度优先搜索DFS就是典型的回溯
    回溯很适合使用递归

    排列组合复习：
    1. 分类加法原理：
        × 定义： 做一件事，完成它有n类方法，第一类有m1种，第二类有m2种方法。。。。， 第m类方法有mn中方法。那么完成这件事有 m1 + m2 + m3 + m4 + ... + mn种不同的方法
        × 本质： 每一类方法均能完成该任务
    2. 分步乘法原理：
        × 定义： 做一件事，完成它有n个步骤，第一步m1种方法，第二步m2中方法。。。。， 第n步有mn中方法，那么完成这件事一共有m1 * m2 * m3 * m4 * ... * mn种不同的方法
        × 本质： 缺少任何一步均无法完成任务，每一步是不可缺少的环节

    3. 排列：
        × 定义：从n个不同的元素中任取m个(m <= n) 元素，按照一定顺序排成一列，叫从n个不同元素中取出m个元素的一个排列
        × 讲究顺序
        × 排列数： 从n个不同元素中任务m个(m <= n)元素所有排列的个数，叫从n个不同的元素中取出m个元素的排列数
        × 排列数计算公式： A(nm) = n * (n - 1) * (n - 2) * ... * (n - (m - 1))
                               = n * (n - 1) * (n - 2) * (n - m + 1) * (n - m) * (n - m - 1) ... 2 * 1      -> n!
                                ----------------------------------------------------------------------
                                               (n - m) * (n - m - 1) * ... * 2 * 1                          -> (n - m)!
                               = n! / (n - m)!
        × 全排列： 从n个元素任取m(m <= n)个元素，按一定顺序排列。 当m = n时的情况叫做全排列
    4. 组合：
        × 定义：从n个不同元素中任取m个(m <= n)元素并为一组，叫从n个不同元素中取出m个元素的一个组合。
        × 不讲究顺序
        × 组合数： 从n个不同元素中任取m个(m <= n)元素所有组合的个数，几位C(nm), C(nm) = 1, C(nn) = 1, C(1n) = n, C(n, n-m) = C(nm)
        × 公式： C(nm) = A(nm) / A(mm)
                C(nm) = A(nm) / A(mm) = n! / ((n - m)! * m!)

    5. 阶乘： n! = 1 * 2 * 3 * 4 * 5 * (n - 1) * n = n(n - 1)!
             o! = 1
 */
package phase1.algs.bt;
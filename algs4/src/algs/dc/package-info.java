/*
    分治： divide and conquer  分而治之

        1. 将原问题分解成若干个规模较小的子问题（子问题和原问题的结构一样，只是规模不一样）
        2. 子问题不断被分成更小的子问题，直到不能分解(直到可以轻易计算出子问题的解)
        3. 利用子问题的解推导出原问题的解

        分治适合用 递归
        子问题之间相互独立

        典型的分治：
            归并排序
            快速排序
            Karatsuba算法（大数乘法）

     分治策略一般遵守主定理(Master Theorem)：
        分解规模为n的问题，分解成 a 个规模为 n / b的子问题,然后在O(n^d)时机内将子问题的解合并起来
        时间复杂度： T(n) = a * T(n / b) + O(n^d), a > 0, b > 1, d >= 0
        推论：
            d > log(b)a, T(n) = O(n^d)
            d = log(b)a, T(n) = O(n^d * logn)
            d < log(b)a, T(n) = O(n^(log(b)a))

    为何分之策略会提升性能:



 */
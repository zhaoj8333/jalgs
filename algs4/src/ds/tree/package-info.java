/*
    节点、根节点、父节点、子节点、兄弟节点

    空树

    子树、 左子树、 右子树

    节点的度： 子树的个数
    树的度：所有节点度中的最大值

    叶子节点：度为0的节点
    非叶子节点：

    层数：

    节点深度：根节点到当前节点的唯一路径上的节点总数
    节点高度：从当前节点到最远叶子节点的路径上的节点总数

    树的深度：所有节点深度最大值
    树的高度：所有节点高度最大值
    树的深度与高度相同

    有序树：树中任意子节点之间有顺序关系
    无序树（自由树）

    森林：m棵不相交的树组成的集合

    二叉树：
        每个节点度最大为2： 0 1 2三种情况
        左子树右子树有顺序
        即使只有一棵树，也要区分左右子树

    二叉树是有序树

    性质：
        叶子节点个数：n0
        度为1的节点个数：n1
        度为2的节点个数：n2
        总结点个数：n = n0 + n1 + n2

        二叉树的边数：
            T = n1 + 2 * n2 = n - 1 = n0 + n1 + n2 - 1
            n2 = n0 - 1
        边数 = 度数

        整个树，除了根节点顶部没有没有边，所以 T = n - 1

        对于任何非空二叉树，如果叶子节点个数为n0，度为2的节点个数为n2，则有: n0 = n2 + 1

        非空二叉树的第i层，最多有2^(i-1)个节点(i >= 1)
        高度为h的二叉树上最多有2^(h) - 1个节点(h >= 1)

    真二叉树：
        所有节点度要么为0，要么为2(节点要么而0个子节点，要么就有2个子节点)
    满二叉树：
        所有节点度要么为0，要么为2，且所有叶子节点都在最后一层(度为0的节点都在最后一层)，在同样高度的二叉树中，
        满二叉树叶子节点数量最多，总结点数量最多
        满二叉树一定是真二叉树，真二叉树不一定是满二叉树

        第i层节点数为 2^(i-1)
        第i层节点数为2^i
        总节点个数为 2^i - 1
        高度h = log2(n + 1)

     完全二叉树： 满二叉树对应
        叶子节点只会出现在最后两层，且最后一层的叶子节点都靠左对齐
        节点排布为从上到下，从左到右
        完全二叉树从根节点至倒数第二层是一颗满二叉树
        满二叉树一定是完全二叉树,完全二叉树不一定是满二叉树

        性质：
            度为1的节点只有左子树（靠左对齐）
            度为1的节点数量要么为1，要么为0
            同样节点的二叉树，完全二叉树的高度最小

            高度为h，则至少有2^(h - 1)个节点，最多有2^h - 1个节点(满二叉树)
            总结点数为n， 2^(h-1) <= n <= 2^(h-1)
                        2^(h-1) <= n < 2^h
                        h - 1 <= log2(n) < h
            高度h =  Math.ceil(log2(n))

            完全二叉树，从上到下，从左到右从0开始编号，对任意第i个节点，如果
            i = 0,为根节点
            i > 0，父节点编号为floor((i - 1) / 2)
            如果 2i + 1 <= n - 1，左子节点编号为2i + 1
            2i + 1 > n - 1,没有左子节点
            2i + 2 <= n - 1，右子节点编号为2i + 2

        已知节点总数，叶子节点个数为：
            (n + 1) >> 1

    线性数据结构的遍历：
        正序遍历
        逆序遍历
    树结构遍历：
        前序遍历
        中序遍历
        后序遍历
        层序遍历

 */
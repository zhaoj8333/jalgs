/*
    动态规划: Dynamic Programming(DP)
        是求解最优化问题的一种常用策略
        是解决多阶段决策过程最优化问题的一种常用方法

    动态规划可以解决很多贪婪算法或分治算法不能解决的问题

    基本思想:
        将带求解的问题分解为若干个相互联系的子问题,先求解子问题,然后从这些子问题的解得到原问题的解;
        对于重复出现的子问题,只在第一次遇到的时候对它进行求解,然后把答案保存起来,以后遇到时直接引用答案,不必重新求解

        贪婪算法中,每采用一次贪婪准则,便做出一个不可撤回的决策
        动态规划中,还要考察每个最优决策序列中是否包含一个最优决策子序列,即问题是否具有最优子结构性质

    通常的使用套路(一步步优化)
        ① 暴力递归(自顶向下,出现了重叠子问题)
        ② 记忆化搜索(自顶向下)
        ③ 递推(自底向上), 动态规划最终采用递推方式

    动态规划中的"动态" 可以理解为 "会变化的状态"
        ① 定义状态(状态是原问题, 子问题的解)
            dp(i)的含义
        ② 设置初始状态(边界)
            dp(0)的值
         ③ 确定状态转移方程
            dp(i) 与 dp(i-1)的关系

 */